package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/sirupsen/logrus"
	"github.com/zmb3/spotify"
	"golang.org/x/oauth2"
	"google.golang.org/api/option"
	"google.golang.org/api/youtube/v3"
)

var (
	youtubeAPIKey string
	spotifyToken  string

	youtubePlaylistID string
	spotifyPlaylistID string
)

func getENV(k string) string {
	env, ok := os.LookupEnv(k)
	if !ok {
		logrus.Fatalf("%s is required", k)
	}
	return env
}

func main() {

	// Get api keys.
	youtubeAPIKey = getENV("YOUTUBE_API_KEY")
	spotifyToken = getENV("SPOTIFY_TOKEN")

	// Get playlist IDs.
	youtubePlaylistID = getENV("YOUTUBE_PLAYLIST_ID")
	spotifyPlaylistID = getENV("SPOTIFY_PLAYLIST_ID")

	// Setup youtube service.
	youtubeSrv, err := youtube.NewService(context.Background(), option.WithAPIKey(youtubeAPIKey))
	if err != nil {
		logrus.Fatalf("cannot create youtube service: %v", err)
	}

	// Setup spotify service.
	t := &oauth2.Token{AccessToken: spotifyToken}
	c := oauth2.NewClient(context.Background(), oauth2.StaticTokenSource(t))
	spotifyClient := spotify.NewClient(c)

	// Empty the spotify playlist.
	if err := emptySpotifyPlaylist(spotifyClient); err != nil {
		logrus.Fatalf("cannot empty spotify playlist: %v", err)
	}

	// Get the youtube playlist.
	songs, err := getYoutubePlaylistSongs(youtubeSrv)
	if err != nil {
		logrus.Fatalf("cannot get youtube playlist: %v", err)
	}

	// Loop over the youtube playlist songs.
	var songsToAdd []spotify.ID
	for i1, v1 := range songs {

		fmt.Print(" ")
		fmt.Printf("\rProcessing song %v/%v...\r", i1+1, len(songs))

		// Check if the youtube song is auto generated by youtube.
		generated := strings.HasSuffix(v1.Snippet.Description, "Auto-generated by YouTube.")

		// Search for the song in spotify.
		searchResults, err := spotifyClient.Search(v1.Snippet.Title, spotify.SearchTypeTrack)
		if err != nil {
			log.Fatalf("cannot search spotify for %s: %v", v1.Snippet.Title, err)
		}

		if len(searchResults.Tracks.Tracks) == 0 {
			continue
		}

		_continue := false
		for _, v := range searchResults.Tracks.Tracks {

			// If the youtube channel name and the spotify artist name match, add it immediately.
			if v1.Snippet.VideoOwnerChannelTitle == v.Artists[0].Name {
				songsToAdd = append(songsToAdd, v.ID)
				_continue = true
				break
			}

			// If the song is auto generated and the titles match, add it immediately.
			if generated && v.Name == v1.Snippet.Title {
				songsToAdd = append(songsToAdd, v.ID)
				_continue = true
				break
			}
		}

		if _continue {
			continue
		}

		// Else, let the user decide what song to add.
		for {

			// Ask the user what song to add.
			fmt.Printf("\n\nI'm not sure about '%s' from the YouTube channel '%s'.\n", v1.Snippet.Title, v1.Snippet.VideoOwnerChannelTitle)
			fmt.Printf("What from Spotify do I add to your Spotify playlist?\n\n")

			// Get the first 50 songs from the search results.
			var first5 []spotify.FullTrack
			if len(searchResults.Tracks.Tracks) > 50 {
				first5 = searchResults.Tracks.Tracks[:50]
			} else {
				first5 = searchResults.Tracks.Tracks
			}

			// Print the first 10 songs for the user.
			for i2, v2 := range first5 {
				fmt.Printf("[%v] %s, by %s\n", i2+1, v2.Name, v2.Artists[0].Name)
			}

			// Wait for an answer.
			fmt.Printf("\n> ")
			var inp int
			if _, err := fmt.Scanf("%v", &inp); err != nil {
				logrus.Fatalf("cannot scan: %v", err)
			}
			fmt.Printf("\n\n\n")

			// Verify that the answer is between 1 and 50.
			verified := false
			for i3 := range make([]int, len(first5)) {
				if inp == i3+1 {
					verified = true
					break
				}
			}

			// If not verified, try again.
			if !verified {
				fmt.Println("Invalid answer.")
				continue
			}

			// Add the song.
			songsToAdd = append(songsToAdd, searchResults.Tracks.Tracks[inp-1].ID)
			break
		}
	}

	// Add the songs to the spotify playlist.
	if len(songsToAdd) > 0 {

		// Use a for loop to add 100 songs at a time.
		for i4 := 0; i4 < (len(songsToAdd) + 100); i4 += 100 {

			// Define the batch as the next 100 songs in the slice.
			batch := songsToAdd[i4 : i4+100]
			lastBatch := false

			// If the last element is empty, clear the other empty elements
			// at the end of the slice.
			if batch[len(batch)-1] == "" {
				for {

					// Check if the last element is empty or not.
					if batch[len(batch)-1] != "" {
						break
					}

					// Remove the last element.
					batch = batch[:len(batch)-1]
				}
				lastBatch = true
			}

			// Make the request to add the songs.
			_, err = spotifyClient.AddTracksToPlaylist(spotify.ID(spotifyPlaylistID), batch...)
			if err != nil {
				logrus.Fatalf("cannot add spotify songs: %v", err)
			}

			if lastBatch {
				break
			}
		}
	}

	// Done!
	fmt.Println("\nDone!")
}
